L378. What is mongoose

    ODM - Object Data Mapper - Object document Mapper
    it connects node.js and mongodb

L379. Connecting Mongoose to Mongo
    npm init -y : in a new folder to initalize package.json
    npm i mongoose
    touch index.js
    // open mongodb and leave it open in the background

    // contents of index.js
    const mongoose = require('mongoose'); // require mongoose after installing it on npm
    mongoose.connect('mongodb://localhost:27017/movieApp', {useNewUrlParser: true, useUnifiedTopology: true}) 
        .then(() => { // try
            console.log("CONNECTION OPEN!!!")
        })
        .catch(err => { // catch if error
            console.log("OH NO ERROR !!!");
            console.log(err);
        })
        
    // in the console in this folder run:
    node index.js

L380. Our First Mongoose Model
    > node
    > .load index.js
    const mongoose = require('mongoose'); // require mongoose after installing 
    it on npm
    mongoose.connect('mongodb://localhost:27017/movieApp', {useNewUrlParser: true, useUnifiedTopology: true}) // where to find mongodb locally / database 
    (if it dosent exist one will be created)
    .then(() => { // try
        console.log("CONNECTION OPEN!!!")
        })
        .catch(err => { // catch if error
            console.log("OH NO ERROR !!!");
                console.log(err);
                })

                // Our first mongoose model

                // schemas
                const movieSchema = new mongoose.Schema({
                    title: String,
                        year: Number,
                            score: Number,
                                rating: String
                                })

                                // take the schema and tell mongoose to make a 
    model using the schema
                                const Movie = mongoose.model('Movie', movieSchema) // pass in name of model and the schema, Movie createw a collection 'movies' in mongoose , save it to a variable and save it to a variable Movie  
                                const amadeus = new Movie ({title: 'Amadeus', year: 1986, score: 9.2, rating: 'R'})
    Promise { <pending> }
    > CONNECTION OPEN!!!

    >
    >
    >
    >
    >
    >
    > amadeus
    {
    _id: 60760396fd4201420c7abf85,
    title: 'Amadeus',
    year: 1986,
    score: 9.2,
    rating: 'R'
    }
    
    // up until this point nothing has been saved to the db

    // Saving to mongo database
    > amadeus.save()
    Promise { <pending> }

    // in our mongodb shell :
    > db.movies.find()
    { "_id" : ObjectId("60760396fd4201420c7abf85"), "title" : "Amadeus", "year" : 1986, "score" : 9.2, "rating" : "R", "__v" : 0 }

    // back to the node powershell:
        > amadeus.score = 9.5
        9.5 // changing it in the js only
        > amadeus.save() // saving the change to database
        Promise { <pending> }
    // checking mongodb shell:
        > db.movies.find() // checking to see that we saved changes on the database side
{ "_id" : ObjectId("60760396fd4201420c7abf85"), "title" : "Amadeus", "year" : 1986, "score" : 9.5, "rating" : "R", "__v" : 0 }

L381. Insert Many
    // after writing the javascript in the indes file run:
    node index.js : confirm that Insert Many is working

    // to check the database make sure im in the moviesApp database and view the contents
    open mongodb powershell
    > use movieApp
    switched to db movieApp
    > db.movies.find()  
        // Result: the objects in the insertMany array in index.js

L382. Finding With Mongoose
    we will connect to mongo , we will keep the movie model , but we are going to comment out the next
    navigate to project folder
    node : node REPL
    .load index.js : running the js file ending with a CONNECTION OPEN!!!  message

    // just running Movie.find() will result in more info than what we need, so we use the then method to log only the data
    Movie.find({}).then(data => console.log(data)) // this filters out relivant data like with promises
    Promise { <pending> }
    > [
    {
        _id: 60760396fd4201420c7abf85,
        title: 'Amadeus',
        year: 1986,
        score: 9.5,
        rating: 'R',
        __v: 0
    },
    {
        _id: 60761452822fc55b7cdd11af,
        title: 'Amelie',
        year: 2001,
        score: 8.3,
        rating: 'R',
        __v: 0
    },
    {
        _id: 60761452822fc55b7cdd11b0,
        title: 'Alien',
        year: 1979,
        score: 8.1,
        rating: 'R',
        __v: 0
    },
    {
        _id: 60761452822fc55b7cdd11b1,
        title: 'The Iron Giant',
        year: 1999,
        score: 7.5,
        rating: 'PG',
        __v: 0
    },
    {
        _id: 60761452822fc55b7cdd11b2,
        title: 'Stand By Me',
        year: 1986,
        score: 8.6,
        rating: 'R',
        __v: 0
    },
    {
        _id: 60761452822fc55b7cdd11b3,
        title: 'Moonrise Kingdom',
        year: 2012,
        score: 7.3,
        rating: 'PG-13',
        __v: 0
    }
    ]

    // Find movie that is PG-13
    > Movie.find({rating: 'PG-13'}).then(data => console.log(data))
    Promise { <pending> }
    > [
    {
        _id: 60761452822fc55b7cdd11b3,
        title: 'Moonrise Kingdom',
        year: 2012,
        score: 7.3,
        rating: 'PG-13',
        __v: 0
    }
    ]

    // find movie more recent than 2010
    > Movie.find({year: {$gte: 2010}}).then(data => console.log(data))
    Promise { <pending> }
    > [
    {
        _id: 60761452822fc55b7cdd11b3,
        title: 'Moonrise Kingdom',
        year: 2012,
        score: 7.3,
        rating: 'PG-13',
        __v: 0
    }
    ]

    >Movie.find({rating: 'PG-13'}).then(data => console.log(data))
            // returns just the ones with the PG-13 ratings

    we can also querry like this
        > Movie.find({year: {$gte: 2010}}).then(data => console.log(data))
            // returns movies newer than or equal to year 2010
        > Movie.find({year: {$lt: 1990}}).then(data => console.log(data))
            // returns 1990 and older
        > Movie.findOne({}).then(m => console.log(m))
            // finds one instance (first one)
        > Movie.find({_id: '60760396fd4201420c7abf85'}).then(m => console.log(m))
            // returns item in Movie db with matching id